{"version":3,"sources":["components/views/home.tsx","components/views/contact.tsx","components/card/card.tsx","components/post/post.tsx","projects/index.tsx","components/views/projects.tsx","posts/index.tsx","components/views/posts.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Home","props","id","className","Contact","Card","target","href","link","children","Post","src","thumbnail","title","description","PROJECTS","Projects","map","post","key","POSTS","Posts","RouteLink","App","text","icon","faHome","faArchive","faBookmark","faUser","path","rel","faEnvelope","size","faGithub","faLinkedin","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kVAMe,SAASA,EAAKC,GAC5B,OACC,yBAAKC,GAAG,QACP,yBAAKC,UAAU,SACd,yBAAKA,UAAU,QAAf,kBACA,yBAAKA,UAAU,QAAf,KACA,yBAAKA,UAAU,QAAf,2CCNW,SAASC,EAAQH,GAC/B,OAAO,yBAAKC,GAAG,Y,MCCD,SAASG,EAAKJ,GAC3B,OACE,yBAAKE,UAAU,QACb,uBAAGA,UAAU,UAAUG,OAAO,SAASC,KAAMN,EAAMO,MAAQ,KAAMP,EAAMQ,W,MCC9D,SAASC,EAAKT,GAC3B,OACE,yBAAKE,UAAU,QACb,kBAACE,EAAD,CAAMG,KAAMP,EAAMO,MAChB,yBAAKL,UAAU,gBACb,yBAAKA,UAAU,WAAWQ,IAAKV,EAAMW,WAAa,KAClD,yBAAKT,UAAU,cAAa,4BAAKF,EAAMY,OAAS,KAChD,yBAAKV,UAAU,oBAAoBF,EAAMa,aAAe,OCnBlE,IASeC,EATE,CACf,CACEF,MAAO,UACPC,YAAa,sCACbN,KAAM,oCACNI,UAAW,oECEA,SAASI,EAASf,GAChC,OACG,yBAAKC,GAAG,YACLa,EAASE,KAAI,SAACC,GACb,OACE,kBAACR,EAAD,CACES,IAAKD,EAAKV,KACVK,MAAOK,EAAKL,MACZC,YAAaI,EAAKJ,YAClBN,KAAMU,EAAKV,KACXI,UAAWM,EAAKN,gBCjB5B,IAUeQ,EAVD,CACZ,CACEP,MAAO,8BACPC,YACE,uKACFN,KAAM,qCACNI,UAAW,kECAA,SAASS,EAAMpB,GAC7B,OAAO,yBAAKC,GAAG,SACbkB,EAAMH,KAAI,SAAAC,GACV,OACC,kBAACR,EAAD,CACCS,IAAKD,EAAKV,KACLK,MAAOK,EAAKL,MACZC,YAAaI,EAAKJ,YAClBN,KAAMU,EAAKV,KACXI,UAAWM,EAAKN,gB,MCmB1B,SAASU,EAAUrB,IAgFJsB,MA5Df,WACC,OACC,kBAAC,IAAD,KACC,yBAAKpB,UAAU,OACd,yBAAKA,UAAU,eACd,kBAACmB,EAAD,CAAWE,KAAK,OAAOC,KAAMC,MAC7B,kBAACJ,EAAD,CAAWE,KAAK,WAAWC,KAAME,MACjC,kBAACL,EAAD,CAAWE,KAAK,QAAQC,KAAMG,MAE9B,kBAACN,EAAD,CAAWE,KAAK,UAAUC,KAAMI,OAGjC,yBAAK1B,UAAU,gBACd,kBAAC,IAAD,KACC,kBAAC,IAAD,CAAO2B,KAAK,SACX,kBAAC9B,EAAD,OAED,kBAAC,IAAD,CAAO8B,KAAK,YACX,kBAAC1B,EAAD,OAED,kBAAC,IAAD,CAAO0B,KAAK,aACX,kBAACd,EAAD,OAED,kBAAC,IAAD,CAAOc,KAAK,UACX,kBAACT,EAAD,SAQH,yBAAKlB,UAAU,WACd,uBACCI,KAAK,kCACLJ,UAAU,YACVG,OAAO,SACPyB,IAAI,uBACJ,kBAAC,IAAD,CAAiBN,KAAMO,IAAYC,KAAK,QAEzC,uBACC1B,KAAK,+BACLJ,UAAU,YACVG,OAAO,SACPyB,IAAI,uBACJ,kBAAC,IAAD,CAAiBN,KAAMS,IAAUD,KAAK,QAEvC,uBACC1B,KAAK,wDACLJ,UAAU,YACVG,OAAO,SACPyB,IAAI,uBACJ,kBAAC,IAAD,CAAiBN,KAAMU,IAAYF,KAAK,YC9F1BG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAEN,kBAAC,EAAD,MACFC,SAASC,eAAe,SD8HnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.fcbde280.chunk.js","sourcesContent":["import React from \"react\";\n\nexport interface HomeProps{\n\n}\n\nexport default function Home(props: HomeProps) {\n\treturn (\n\t\t<div id=\"home\">\n\t\t\t<div className=\"brief\">\n\t\t\t\t<div className=\"name\">Greg Zanchelli</div>\n\t\t\t\t<div className=\"pipe\">|</div>\n\t\t\t\t<div className=\"desc\">\n\t\t\t\t\tacoustical engineer, developer, maker\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t); \n}","import React from \"react\";\n\nexport interface ContactProps {\n\n}\n\nexport default function Contact(props: ContactProps) {\n\treturn <div id=\"contact\"></div>;\n}\n","import React from \"react\";\nimport \"./card.css\";\n\nexport interface CardProps {\n  children?: React.ReactNode | React.ReactNode[];\n  link?: string;\n}\n\nexport default function Card(props: CardProps) {\n  return (\n    <div className=\"card\">\n      <a className=\"no-link\" target=\"_blank\" href={props.link || \"#\"}>{props.children}</a>\n    </div>\n  );\n}\n","import React from \"react\";\nimport Card from \"../card/card\";\n\nimport \"./post.css\";\n\nexport interface PostProps {\n  title?: string;\n  thumbnail?: string;\n  description?: string;\n  link?: string;\n}\n\nexport default function Post(props: PostProps) {\n  return (\n    <div className=\"post\">\n      <Card link={props.link}>\n        <div className=\"post-content\">\n          <img className=\"post-img\" src={props.thumbnail || \"\"} />\n          <div className=\"post-title\"><h3>{props.title || \"\"}</h3></div>\n          <div className=\"post-description\">{props.description || \"\"}</div>\n        </div>\n      </Card>\n    </div>\n  );\n}\n","const PROJECTS = [\n  {\n    title: \"cram.ui\",\n    description: \"Computational Room Acoustics Module\",\n    link: \"https://github.com/gregzanch/cram\",\n    thumbnail: \"https://github.com/gregzanch/cram/raw/master/docs/img/cram1.png\",\n  },\n];\n\nexport default PROJECTS","import React from \"react\";\nimport Post from \"../post/post\";\nimport PROJECTS from '../../projects';\nexport interface ProjectsProps {\n\n}\n\nexport default function Projects(props: ProjectsProps) {\n\treturn (\n    <div id=\"projects\">\n      {PROJECTS.map((post) => {\n        return (\n          <Post\n            key={post.link}\n            title={post.title}\n            description={post.description}\n            link={post.link}\n            thumbnail={post.thumbnail}\n          />\n        );\n      })}\n    </div>\n  );\n}\n","const POSTS = [\n  {\n    title: \"RIR Generation Using Octave\",\n    description:\n      \"Generating a roomâ€™s impulse response (RIR) can be pretty daunting in languages like C/C++ or java. Using Octave, we can accomplish this in a few lines of code.\",\n    link: \"https://link.medium.com/gQpjTBr275\",\n    thumbnail: \"https://miro.medium.com/max/1400/1*zWoRXPSXES6IHesBdZjWDg.png\",\n  },\n];\n\nexport default POSTS","import React from \"react\";\nimport Post from \"../post/post\";\nimport POSTS from '../../posts';\n\nexport interface PostsProps {}\n\nexport default function Posts(props: PostsProps) {\n\treturn <div id=\"posts\">\n\t\t{POSTS.map(post => {\n\t\t\treturn (\n\t\t\t\t<Post\n\t\t\t\t\tkey={post.link}\n          title={post.title}\n          description={post.description}\n          link={post.link}\n          thumbnail={post.thumbnail}\n        />\n      );\n\t\t})}\n\t</div>;\n}\n","import React, { useState } from 'react';\r\nimport { BrowserRouter as Router, Switch, Route, Link, Redirect, NavLink } from \"react-router-dom\";\r\n// import background from './res/cold-leaves-background-blurred.png';\r\nimport {\r\n\tFontAwesomeIcon\r\n} from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n\tfaGithub,\r\n\tfaLinkedin,\r\n\tIconDefinition\r\n} from '@fortawesome/free-brands-svg-icons'\r\nimport {\r\n\tfaEnvelope,\r\n\tfaArchive,\r\n\t// faGlobe,\r\n\tfaUser,\r\n\tfaHome,\r\n\tfaBookmark\r\n\t// faFileAlt,\r\n\t// faLayerGroup\r\n} from '@fortawesome/free-solid-svg-icons';\r\nimport Home from \"./components/views/home\";\r\nimport Contact from \"./components/views/contact\";\r\nimport Projects from \"./components/views/projects\";\r\nimport Resources from \"./components/views/resources\";\r\nimport Posts from \"./components/views/posts\";\r\n\r\nimport './App.css';\r\n\r\ninterface IRouteLink {\r\n\ttext: string;\r\n\ticon?: IconDefinition;\r\n}\r\n\r\nfunction RouteLink(props: IRouteLink) {\r\n\t// let containerClassName = \"route-link\";\r\n\treturn (\r\n\t\t// <div className={containerClassName}>\r\n\t\t\t<NavLink\r\n\t\t\t\tto={\"/\" + props.text.toLowerCase()}\r\n\t\t\t\tclassName=\"icon-link route-link\"\r\n\t\t\t\tactiveClassName=\"route-link-active\"\r\n\t\t\t\tid={props.text.toLowerCase()}>\r\n\t\t\t\t{props.icon ? (\r\n\t\t\t\t\t<FontAwesomeIcon icon={props.icon} size=\"sm\" />\r\n\t\t\t\t) : (\r\n\t\t\t\t\t\"\"\r\n\t\t\t\t)}\r\n\t\t\t\t<div className=\"icon-link-text\">{props.text}</div>\r\n\t\t\t</NavLink>\r\n\t\t// </div>\r\n\t);\r\n}\r\n\r\nfunction App() {\r\n\treturn (\r\n\t\t<Router>\r\n\t\t\t<div className=\"App\">\r\n\t\t\t\t<div className=\"route-links\">\r\n\t\t\t\t\t<RouteLink text=\"Home\" icon={faHome} />\r\n\t\t\t\t\t<RouteLink text=\"Projects\" icon={faArchive} />\r\n\t\t\t\t\t<RouteLink text=\"Posts\" icon={faBookmark} />\r\n\t\t\t\t\t{/* <RouteLink text=\"Resources\" icon={faGlobe} /> */}\r\n\t\t\t\t\t<RouteLink text=\"Contact\" icon={faUser} />\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<div className=\"view-wrapper\">\r\n\t\t\t\t\t<Switch>\r\n\t\t\t\t\t\t<Route path=\"/home\">\r\n\t\t\t\t\t\t\t<Home />\r\n\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t\t<Route path=\"/contact\">\r\n\t\t\t\t\t\t\t<Contact />\r\n\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t\t<Route path=\"/projects\">\r\n\t\t\t\t\t\t\t<Projects />\r\n\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t\t<Route path=\"/posts\">\r\n\t\t\t\t\t\t\t<Posts />\r\n\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t\t{/* <Route path=\"/resources\">\r\n\t\t\t\t\t\t\t<Resources />\r\n\t\t\t\t\t\t</Route> */}\r\n\t\t\t\t\t</Switch>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<div className=\"connect\">\r\n\t\t\t\t\t<a\r\n\t\t\t\t\t\thref=\"mailto:zanchelli.greg@gmail.com\"\r\n\t\t\t\t\t\tclassName=\"icon-link\"\r\n\t\t\t\t\t\ttarget=\"_blank\"\r\n\t\t\t\t\t\trel=\"noopener noreferrer\">\r\n\t\t\t\t\t\t<FontAwesomeIcon icon={faEnvelope} size=\"1x\" />\r\n\t\t\t\t\t</a>\r\n\t\t\t\t\t<a\r\n\t\t\t\t\t\thref=\"https://github.com/gregzanch\"\r\n\t\t\t\t\t\tclassName=\"icon-link\"\r\n\t\t\t\t\t\ttarget=\"_blank\"\r\n\t\t\t\t\t\trel=\"noopener noreferrer\">\r\n\t\t\t\t\t\t<FontAwesomeIcon icon={faGithub} size=\"1x\" />\r\n\t\t\t\t\t</a>\r\n\t\t\t\t\t<a\r\n\t\t\t\t\t\thref=\"https://www.linkedin.com/in/greg-zanchelli-40268a190/\"\r\n\t\t\t\t\t\tclassName=\"icon-link\"\r\n\t\t\t\t\t\ttarget=\"_blank\"\r\n\t\t\t\t\t\trel=\"noopener noreferrer\">\r\n\t\t\t\t\t\t<FontAwesomeIcon icon={faLinkedin} size=\"1x\" />\r\n\t\t\t\t\t</a>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</Router>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n// import { BrowserRouter } from \"react-router-dom\";\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n\r\n\t\t\t<App />,\r\n\tdocument.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}