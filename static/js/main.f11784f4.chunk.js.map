{"version":3,"sources":["res/cold-leaves-background-blurred.png","components/views/home.tsx","components/views/about.tsx","components/views/projects.tsx","components/views/resources.tsx","components/views/posts.tsx","App.tsx","features/counter/counterSlice.ts","app/store.ts","serviceWorker.ts","index.tsx"],"names":["module","exports","Home","props","className","visible","About","Projects","Resources","Posts","RouteLink","id","text","toLowerCase","onClick","icon","size","App","useState","view","setView","routeLinkHander","e","currentTarget","src","background","alt","faUser","faArchive","faBookmark","faGlobe","href","target","rel","faEnvelope","faGithub","faLinkedin","counterSlice","createSlice","name","initialState","value","reducers","increment","state","decrement","incrementByAmount","action","payload","actions","store","configureStore","reducer","counter","counterReducer","devTools","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f11784f4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cold-leaves-background-blurred.8adf1451.png\";","import React from \"react\";\n\nexport interface HomeProps{\n\tvisible: boolean;\n}\n\nexport default function Home(props: HomeProps) {\n\treturn (\n\t\t<div className={props.visible ? \"visible\" : \"hidden\"}>\n\t\t\t<div className=\"brief\">\n\t\t\t\t<div className=\"name\">Greg Zanchelli</div>\n\t\t\t\t<div className=\"pipe\">|</div>\n\t\t\t\t<div className=\"desc\">acoustical engineer, developer, maker</div>\n\t\t\t</div>\n\t\t</div>\n  ); \n}","import React from \"react\";\n\nexport interface AboutProps {\n\tvisible: boolean;\n}\n\nexport default function About(props: AboutProps) {\n\treturn (\n\t\t<div className={props.visible ? \"visible\" : \"hidden\"}>\n\t\t\t<div>about</div>\n\t\t</div>\n\t);\n}\n","import React from \"react\";\n\nexport interface ProjectsProps {\n\tvisible: boolean;\n}\n\nexport default function Projects(props: ProjectsProps) {\n\treturn (\n\t\t<div className={props.visible ? \"visible\" : \"hidden\"}>\n\t\t\t<div>Projects</div>\n\t\t</div>\n\t);\n}\n","import React from \"react\";\n\nexport interface ResourcesProps {\n\tvisible: boolean;\n}\n\nexport default function Resources(props: ResourcesProps) {\n\treturn (\n\t\t<div className={props.visible ? \"visible\" : \"hidden\"}>\n\t\t\t<div>Resources</div>\n\t\t</div>\n\t);\n}\n","import React from \"react\";\n\nexport interface PostsProps {\n\tvisible: boolean;\n}\n\nexport default function Posts(props: PostsProps) {\n\treturn (\n\t\t<div className={props.visible ? \"visible\" : \"hidden\"}>\n\t\t\t<div>Posts</div>\n\t\t</div>\n\t);\n}\n","import React, { useState } from 'react';\r\nimport background from './res/cold-leaves-background-blurred.png';\r\nimport {\r\n\tFontAwesomeIcon\r\n} from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n\tfaGithub,\r\n\tfaLinkedin,\r\n\tIconDefinition\r\n} from '@fortawesome/free-brands-svg-icons'\r\nimport {\r\n\tfaEnvelope,\r\n\tfaArchive,\r\n\tfaGlobe,\r\n\tfaUser,\r\n\t// faFileAlt,\r\n\tfaBookmark\r\n\t// faLayerGroup\r\n} from '@fortawesome/free-solid-svg-icons';\r\nimport Home from \"./components/views/home\";\r\nimport About from \"./components/views/about\";\r\nimport Projects from \"./components/views/projects\";\r\nimport Resources from \"./components/views/resources\";\r\nimport Posts from \"./components/views/posts\";\r\n\r\nimport './App.css';\r\n\r\ninterface IRouteLink {\r\n\ttext: string;\r\n\ticon?: IconDefinition;\r\n\tonClick: (e: React.MouseEvent) => void;\r\n}\r\n\r\nfunction RouteLink(props: IRouteLink) {\r\n\treturn (\r\n\t\t<div className=\"route-link\">\r\n\t\t\t<button className=\"icon-link\" id={props.text.toLowerCase()} onClick={props.onClick}>\r\n\t\t\t\t{props.icon ? <FontAwesomeIcon icon={props.icon} size=\"sm\" /> : \"\"}\r\n\t\t\t\t<div className=\"icon-link-text\">{props.text}</div>\r\n\t\t\t</button>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nfunction App() {\r\n\tconst [view, setView] = useState(\"home\");\r\n\tconst routeLinkHander = (e: React.MouseEvent) => {\r\n\t\tsetView(e.currentTarget.id || \"home\");\r\n\t}\r\n  return (\r\n\t\t<div className=\"App\">\r\n\t\t\t<img\r\n\t\t\t\tsrc={background}\r\n\t\t\t\talt=\"cold-leaves\"\r\n\t\t\t\tclassName=\"background-image\"\r\n\t\t\t/>\r\n\r\n\t\t\t<div className=\"route-links\">\r\n\t\t\t\t<RouteLink\r\n\t\t\t\t\ttext=\"About\"\r\n\t\t\t\t\ticon={faUser}\r\n\t\t\t\t\tonClick={routeLinkHander}\r\n\t\t\t\t/>\r\n\t\t\t\t<RouteLink\r\n\t\t\t\t\ttext=\"Projects\"\r\n\t\t\t\t\ticon={faArchive}\r\n\t\t\t\t\tonClick={routeLinkHander}\r\n\t\t\t\t/>\r\n\t\t\t\t<RouteLink\r\n\t\t\t\t\ttext=\"Posts\"\r\n\t\t\t\t\ticon={faBookmark}\r\n\t\t\t\t\tonClick={routeLinkHander}\r\n\t\t\t\t/>\r\n\t\t\t\t<RouteLink\r\n\t\t\t\t\ttext=\"Resources\"\r\n\t\t\t\t\ticon={faGlobe}\r\n\t\t\t\t\tonClick={routeLinkHander}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"view-wrapper\">\r\n\t\t\t\t<Home visible={view === \"home\"} />\r\n\t\t\t\t<About visible={view === \"about\"} />\r\n\t\t\t\t<Projects visible={view === \"projects\"} />\r\n\t\t\t\t<Posts visible={view === \"posts\"} />\r\n\t\t\t\t<Resources visible={view === \"resources\"} />\r\n\t\t\t</div>\r\n\t\t\t<div className=\"connect\">\r\n\t\t\t\t<a\r\n\t\t\t\t\thref=\"mailto:zanchelli.greg@gmail.com\"\r\n\t\t\t\t\tclassName=\"icon-link\"\r\n\t\t\t\t\ttarget=\"_blank\"\r\n\t\t\t\t\trel=\"noopener noreferrer\">\r\n\t\t\t\t\t<FontAwesomeIcon icon={faEnvelope} size=\"1x\" />\r\n\t\t\t\t</a>\r\n\t\t\t\t<a\r\n\t\t\t\t\thref=\"https://github.com/gregzanch\"\r\n\t\t\t\t\tclassName=\"icon-link\"\r\n\t\t\t\t\ttarget=\"_blank\"\r\n\t\t\t\t\trel=\"noopener noreferrer\">\r\n\t\t\t\t\t<FontAwesomeIcon icon={faGithub} size=\"1x\" />\r\n\t\t\t\t</a>\r\n\t\t\t\t<a\r\n\t\t\t\t\thref=\"https://www.linkedin.com/in/greg-zanchelli-40268a190/\"\r\n\t\t\t\t\tclassName=\"icon-link\"\r\n\t\t\t\t\ttarget=\"_blank\"\r\n\t\t\t\t\trel=\"noopener noreferrer\">\r\n\t\t\t\t\t<FontAwesomeIcon icon={faLinkedin} size=\"1x\" />\r\n\t\t\t\t</a>\r\n\t\t\t</div>\r\n\t\t</div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { AppThunk, RootState } from '../../app/store';\r\n\r\ninterface CounterState {\r\n  value: number;\r\n}\r\n\r\nconst initialState: CounterState = {\r\n  value: 0,\r\n};\r\n\r\nexport const counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState,\r\n  reducers: {\r\n    increment: state => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1;\r\n    },\r\n    decrement: state => {\r\n      state.value -= 1;\r\n    },\r\n    // Use the PayloadAction type to declare the contents of `action.payload`\r\n    incrementByAmount: (state, action: PayloadAction<number>) => {\r\n      state.value += action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\nexport const incrementAsync = (amount: number): AppThunk => dispatch => {\r\n  setTimeout(() => {\r\n    dispatch(incrementByAmount(amount));\r\n  }, 1000);\r\n};\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\r\nexport const selectCount = (state: RootState) => state.counter.value;\r\n\r\nexport default counterSlice.reducer;\r\n","import { configureStore, ThunkAction, Action} from '@reduxjs/toolkit';\r\nimport counterReducer from '../features/counter/counterSlice';\r\n\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    counter: counterReducer,\r\n  },\r\n  devTools: true  \r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n  ReturnType,\r\n  RootState,\r\n  unknown,\r\n  Action<string>\r\n>;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { store } from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}